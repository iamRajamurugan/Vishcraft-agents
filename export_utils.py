import json
from datetime import datetime
import streamlit as st

def export_results_as_json(results, user_input):
    """
    Export the results and user input as a JSON string
    """
    export_data = {
        "user_input": user_input,
        "results": results,
        "exported_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    return json.dumps(export_data, indent=2)

def format_results_as_markdown(results, user_input):
    """
    Format the enhanced results as markdown for export or display
    """
    roles = results.get("role_fit", {}).get("recommended_roles", [])
    personality_profile = results.get("role_fit", {}).get("personality_profile", {})
    vertical_paths = results.get("career_path", {}).get("vertical_paths", [])
    lateral_paths = results.get("career_path", {}).get("lateral_paths", [])
    all_paths = results.get("career_path", {}).get("career_paths", [])
    skill_gaps = results.get("action_plan", {}).get("skill_gaps", [])
    action_plan = results.get("action_plan", {}).get("action_plan", "")
    progress_tracker = results.get("action_plan", {}).get("progress_tracker", {})
    enhanced_features = results.get("enhanced_features", {})
    
    md = f"""# Enhanced Career Guidance Report
Generated on {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}

## Your Profile
- **Skills**: {', '.join(user_input.get('skills', []))}
- **Interests**: {', '.join(user_input.get('interests', []))}
- **Experience**: {user_input.get('experience', 0)} years

## Personality Analysis
"""
    
    if personality_profile:
        md += f"- **Personality Traits**: {', '.join(personality_profile.get('personality_traits', []))}\n"
        md += f"- **Work Style**: {personality_profile.get('work_style', 'N/A')}\n"
        md += f"- **Preferred Environment**: {personality_profile.get('preferred_environment', 'N/A')}\n"
    else:
        md += "No personality analysis available.\n"
    
    md += "\n## Enhanced Features\n"
    if enhanced_features:
        if enhanced_features.get("personality_inference"):
            md += "✅ Personality-Based Role Matching\n"
        if enhanced_features.get("lateral_paths"):
            md += "✅ Vertical & Lateral Career Paths\n"
        if enhanced_features.get("adaptive_planning"):
            md += "✅ Adaptive Action Planning\n"
        if enhanced_features.get("monetization_ready"):
            md += "✅ Professional Report Ready\n"
    
    md += "\n## Recommended Roles\n"
    
    if roles:
        for role in roles:
            md += f"- {role}\n"
    else:
        md += "No roles found.\n"
    
    md += "\n## Career Paths\n"
    
    if vertical_paths:
        md += "\n### 📈 Vertical Growth Paths\n"
        for path in vertical_paths:
            md += f"- {path}\n"
    
    if lateral_paths:
        md += "\n### ↔️ Lateral Transition Paths\n"
        for path in lateral_paths:
            md += f"- {path}\n"
    
    if not vertical_paths and not lateral_paths and all_paths:
        md += "\n### All Career Paths\n"
        for path in all_paths:
            md += f"- {path}\n"
    
    if not vertical_paths and not lateral_paths and not all_paths:
        md += "No career paths found.\n"
    
    md += "\n## Skill Gaps Analysis\n"
    
    if skill_gaps and any(gap.strip() for gap in skill_gaps):
        for gap in skill_gaps:
            if gap and gap.strip().lower() not in ["none", "undefined"]:
                md += f"- {gap}\n"
    else:
        md += "No significant skill gaps identified.\n"
    
    md += "\n## Progress Tracking\n"
    
    if progress_tracker:
        total_skills = progress_tracker.get("total_skills_needed", 0)
        completed_skills = progress_tracker.get("skills_completed", 0)
        
        if total_skills > 0:
            progress_percentage = (completed_skills / total_skills) * 100
            md += f"- **Progress**: {completed_skills}/{total_skills} skills ({progress_percentage:.1f}%)\n"
        else:
            md += "- **Status**: Ready to begin your career journey\n"
        
        md += f"- **Last Updated**: {progress_tracker.get('last_updated', 'N/A')}\n"
    
    md += "\n## Adaptive Action Plan\n"
    
    if action_plan and action_plan.strip() and action_plan.strip().lower() not in ["no action plan generated.", "none", "undefined"]:
        md += action_plan
    else:
        md += "No action plan was generated.\n"
    
    md += "\n\n---\nGenerated by VishCraft Enhanced Career Guidance System"
    
    return md
